{"version":3,"file":"static/js/797.7414913a.chunk.js","mappings":"4MAQMA,EAAc,SAACC,EAAMC,EAAMC,EAAaC,GAC5C,OACE,4BACE,0BACE,SAAC,KAAD,CAAOH,KAAMA,EAAMC,KAAMA,EAAMC,YAAaA,OAE9C,SAAC,KAAD,CAAcF,KAAMG,EAAWC,UAAU,YAKzCC,EAAoB,SAAAC,GACvB,IAAMC,EAAS,GAQf,OAPKD,EAAOE,MAGR,2CAA2CC,KAAMH,EAAOE,SAEzDD,EAAOC,MAAQ,yBAJfD,EAAOC,MAAQ,aAMXD,GAGJG,EAA4BC,EAAAA,KAAaC,MAAO,CACnDZ,KAAMW,EAAAA,KAAaE,UAAU,4GAAuBC,SAAS,wEAC7DC,WAAYJ,EAAAA,KAAaE,UAAU,4GAAuBC,SAAS,wEACnEE,UAAUC,EAAAA,EAAAA,GAAoB,EAAG,IAAIH,SAAU,cAC/CI,gBAAiBP,EAAAA,KAAaQ,MAAM,CAACR,EAAAA,GAAQ,aAAc,4GAAuBG,SAAS,wEAC3FN,MAAOG,EAAAA,KAAaH,MAAM,yFAC1BY,aAAcT,EAAAA,KAAaQ,MAAM,CAACR,EAAAA,GAAQ,UAAW,6EAAsBG,SAAS,0EA8EvF,WAAeO,EAAAA,EAAAA,KANS,SAACC,GACvB,MAAO,CACLC,OAAQD,EAAME,KAAKD,UAImB,CAACE,MAAAA,EAAAA,IAA3C,EA1Ec,SAACC,GACb,OAAIA,EAAMH,QACD,SAAC,KAAD,CAAUI,GAAG,cAGpB,4BACE,6CAEA,SAAC,KAAD,CACEC,cAAe,CACb5B,KAAM,GACNe,WAAY,GACZP,MAAO,GACPY,aAAc,GACdJ,SAAU,GACVE,gBAAiB,GACjBW,YAAY,GAEdC,SAAUzB,EACV0B,gBAAc,EACdC,iBAAkBtB,EAElBuB,SAAU,SAAC3B,EAAD,GAA2C,IAAhC4B,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCT,EAAMD,MAAMnB,EAAOE,MAAOF,EAAOU,SAAUV,EAAOuB,WAAYM,GAC9DD,GAAc,IAhBlB,SAmBG,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,MAAOC,EAAjC,EAAiCA,OAAjC,OACC,UAAC,KAAD,YAEE,kBAAOC,QAAQ,OAAf,iCACA,kBACCzC,EAAY,OAAQ,OAAQ,SAAU,SAEvC,kBAAOyC,QAAQ,aAAf,yDACA,kBACCzC,EAAY,aAAc,OAAQ,UAAW,cAE7CA,EAAY,QAAS,OAAQ,SAAU,SAEvCA,EAAY,eAAgB,OAAQ,iBAAkB,gBAEtDA,EAAY,WAAY,WAAY,WAAY,YAEhDA,EAAY,kBAAmB,WAAY,mBAAoB,oBAEhE,yBAAMwC,KAEN,4BACE,SAAC,KAAD,CAAOvC,KAAM,aAAcC,KAAM,WAAYwC,GAAG,gBAChD,kBAAOD,QAAS,aAAhB,+BAGF,mBACEE,UAAWN,IAAYE,EACvBK,QAASN,EACTpC,KAAM,SAHR,0BAUN,wC,kECtGOgB,EAAsB,SAAC2B,EAAWC,GAAZ,OACjClC,EAAAA,KACGmC,IAAIF,EADP,8BACyCA,EADzC,aAEGG,IAAIF,EAFP,wBAEmCA,EAFnC","sources":["components/Login/Login.jsx","components/common/validators/validators.js"],"sourcesContent":["import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { connect } from 'react-redux';\r\nimport { login } from './../../redux/auth-reducer';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { minMaxLengthCreator } from '../common/validators/validators';\r\n\r\nconst createField = (name, type, placeholder, errorName) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Field name={name} type={type} placeholder={placeholder} />\r\n      </div>\r\n      <ErrorMessage name={errorName} component=\"div\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst validateLoginForm = values => {\r\n   const errors = {};\r\n   if (!values.email) {\r\n      errors.email = 'Required 1';\r\n   } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test( values.email )\r\n   ) {\r\n      errors.email = 'Invalid email address';\r\n   }\r\n   return errors;\r\n};\r\n\r\nconst validationSchemaLoginForm = Yup.object().shape( {\r\n   name: Yup.string().typeError(\"Должно быть строкой\").required(\"Обязательно 1\"),\r\n   secondName: Yup.string().typeError(\"Должно быть строкой\").required(\"Обязательно 2\"),\r\n   password: minMaxLengthCreator(3, 12).required( \"Required 2\" ),\r\n   confirmPassword: Yup.string().oneOf([Yup.ref(\"password\")], \"Пароли не совпадают\").required(\"Обязательно 3\"),\r\n   email: Yup.string().email(\"введите верный email\"),\r\n   confirmEmail: Yup.string().oneOf([Yup.ref(\"email\")], \"Email не совпадают\").required(\"Обязательно 4\")\r\n} );\r\n\r\n\r\nconst Login = (props) => {\r\n  if (props.isAuth) {\r\n    return <Navigate to='/profile' />//если залогинены, по перенаправляем на страницу профиля\r\n  }\r\n  return (\r\n    <div>\r\n      <h2> ... Login 555 </h2>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          secondName: \"\",\r\n          email: \"\",\r\n          confirmEmail: \"\",\r\n          password: \"\",\r\n          confirmPassword: \"\",\r\n          rememberMe: false,\r\n        }}\r\n        validate={validateLoginForm}\r\n        validateOnBlur\r\n        validationSchema={validationSchemaLoginForm}\r\n        \r\n        onSubmit={(values, { setSubmitting, setStatus }) => {\r\n          props.login(values.email, values.password, values.rememberMe, setStatus);// передаём в BLL эти параметры из локального стейта Formik\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ isValid, handleSubmit, dirty, status }) => (\r\n          <Form >\r\n\r\n            <label htmlFor=\"name\">Имя</label>\r\n            <br />\r\n            {createField(\"name\", \"text\", \"Stepan\", \"name\")}\r\n\r\n            <label htmlFor=\"secondName\">Фамилия</label>\r\n            <br />\r\n            {createField(\"secondName\", \"text\", \"Bandera\", \"secondName\")}\r\n\r\n            {createField(\"email\", \"text\", \"e-mail\", \"email\")}\r\n\r\n            {createField(\"confirmEmail\", \"text\", \"confirm e-mail\", \"confirmEmail\")}\r\n\r\n            {createField(\"password\", \"password\", \"password\", \"password\")}\r\n\r\n            {createField(\"confirmPassword\", \"password\", \"confirm password\", \"confirmPassword\")}\r\n\r\n            <div>{status}</div>\r\n            \r\n            <div>\r\n              <Field name={\"rememberMe\"} type={\"checkbox\"} id=\"rememberMe\" />\r\n              <label htmlFor={\"rememberMe\"}> remember me </label>\r\n            </div>\r\n\r\n            <button\r\n              disabled={!isValid && !dirty}\r\n              onClick={handleSubmit}\r\n              type={\"submit\"}\r\n            >\r\n              Login\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      <div>...</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default connect ( mapStateToProps, {login}) (Login);","import * as Yup from \"yup\";\r\n\r\nexport const minMaxLengthCreator = (minLength, maxLength) =>\r\n  Yup.string()\r\n    .min(minLength, `Must be longer than ${minLength} symbols`)\r\n    .max(maxLength, `Max length is ${maxLength} symbols`)\r\n"],"names":["createField","name","type","placeholder","errorName","component","validateLoginForm","values","errors","email","test","validationSchemaLoginForm","Yup","shape","typeError","required","secondName","password","minMaxLengthCreator","confirmPassword","oneOf","confirmEmail","connect","state","isAuth","auth","login","props","to","initialValues","rememberMe","validate","validateOnBlur","validationSchema","onSubmit","setSubmitting","setStatus","isValid","handleSubmit","dirty","status","htmlFor","id","disabled","onClick","minLength","maxLength","min","max"],"sourceRoot":""}